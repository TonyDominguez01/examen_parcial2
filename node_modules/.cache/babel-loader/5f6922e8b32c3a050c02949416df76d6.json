{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tony Dominguez\\\\Documents\\\\Tony\\\\Universidad\\\\CuatriDiez\\\\AplicacionesWebProgresivas\\\\examen2parcial\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from 'react';\nimport { AuthContext } from './context/AuthContext';\nimport { AuthReducer } from './reducers/AuthReducer';\nimport AppRouter from './routes/AppRouter'; //Definimos la funcion init, para intentar recuperar el estado log desde el localstorage.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst init = () => {\n  return JSON.parse(localStorage.getItem('log')) || {\n    log: false\n  };\n};\n\nconst App = () => {\n  _s();\n\n  //definimos el context para toda la aplicación mediante el hook useContext\n  const [log, dispatch] = useReducer(AuthReducer, {}, init); //Definimos un useEffect para persistir el estado del log\n\n  useEffect(() => {\n    localStorage.setItem('log', JSON.stringify(log));\n  }, [log]); //Usamos <AuthContext.Provider> para proveer el contexto a toda la aplicacion\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      log,\n      dispatch\n    },\n    children: /*#__PURE__*/_jsxDEV(AppRouter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"r9oMEysrhafAXDRqgeVcqtv9aVc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Tony Dominguez/Documents/Tony/Universidad/CuatriDiez/AplicacionesWebProgresivas/examen2parcial/src/App.js"],"names":["React","useReducer","useEffect","AuthContext","AuthReducer","AppRouter","init","JSON","parse","localStorage","getItem","log","App","dispatch","setItem","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAEA;;;;AACA,MAAMC,IAAI,GAAG,MAAM;AACf,SAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAX,KAA2C;AAACC,IAAAA,GAAG,EAAE;AAAN,GAAlD;AACH,CAFD;;AAIA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEd;AACA,QAAM,CAACD,GAAD,EAAME,QAAN,IAAkBZ,UAAU,CAACG,WAAD,EAAc,EAAd,EAAkBE,IAAlB,CAAlC,CAHc,CAKd;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,YAAY,CAACK,OAAb,CAAqB,KAArB,EAA4BP,IAAI,CAACQ,SAAL,CAAeJ,GAAf,CAA5B;AACH,GAFQ,EAEN,CAACA,GAAD,CAFM,CAAT,CANc,CAUd;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACA,MAAAA,GAAD;AAAME,MAAAA;AAAN,KAA7B;AAAA,2BACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAhBD;;GAAMD,G;;KAAAA,G;AAkBN,eAAeA,GAAf","sourcesContent":["import React, { useReducer, useEffect } from 'react'\nimport { AuthContext } from './context/AuthContext'\nimport { AuthReducer } from './reducers/AuthReducer'\nimport AppRouter from './routes/AppRouter'\n\n//Definimos la funcion init, para intentar recuperar el estado log desde el localstorage.\nconst init = () => {\n    return JSON.parse(localStorage.getItem('log')) || {log: false}\n}\n\nconst App = () => {\n\n    //definimos el context para toda la aplicación mediante el hook useContext\n    const [log, dispatch] = useReducer(AuthReducer, {}, init);\n\n    //Definimos un useEffect para persistir el estado del log\n    useEffect(() => {\n        localStorage.setItem('log', JSON.stringify(log));\n    }, [log])\n\n    //Usamos <AuthContext.Provider> para proveer el contexto a toda la aplicacion\n    return (\n        <AuthContext.Provider value={{log, dispatch}}>\n            <AppRouter></AppRouter>\n        </AuthContext.Provider>\n    )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}